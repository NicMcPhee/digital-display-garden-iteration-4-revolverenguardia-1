package umm3601;

import net.minidev.json.JSONObject;
import org.pac4j.core.config.Config;
import org.pac4j.core.config.ConfigFactory;
import org.pac4j.core.profile.CommonProfile;
import org.pac4j.core.profile.ProfileManager;
import org.pac4j.jwt.config.signature.SecretSignatureConfiguration;
import org.pac4j.jwt.credentials.authenticator.JwtAuthenticator;
import org.pac4j.jwt.profile.JwtGenerator;
import org.pac4j.oauth.client.Google2Client;
import org.pac4j.oauth.profile.google2.Google2Profile;
import org.pac4j.sparkjava.CallbackRoute;
import org.pac4j.sparkjava.SecurityFilter;
import org.pac4j.sparkjava.SparkWebContext;
import spark.Request;
import spark.Response;
import spark.Route;
import spark.utils.IOUtils;
import com.mongodb.util.JSON;
import umm3601.OAUTH.DDGConfigFactory;
import umm3601.digitalDisplayGarden.BedController;
import umm3601.digitalDisplayGarden.GardenCharts;
import umm3601.digitalDisplayGarden.PlantController;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.*;

import static spark.Spark.*;

import umm3601.digitalDisplayGarden.ExcelParser;
import umm3601.digitalDisplayGarden.QRCodes;

import javax.servlet.MultipartConfigElement;
import javax.servlet.http.Part;


public class Server {

    public static final String API_URL = "https://revolverenguardia.dungeon.website";
    public static final String JS_ORIGIN_URL = "http://localhost:9000"; //change to https://revolverenguardia.dungeon.website for prod
    public static final String JWT_SALT_PATH = "/jwtsalt.txt";
    public static final String G2_AUTH_PATH = "/google2auth.txt";
    private static String JWT_SALT;

    public static String databaseName = "test";

    private static String excelTempDir = "/tmp/digital-display-garden";

    public static void main(String[] args) throws IOException {
        String Google2Key;
        String Google2Secret;

        try
        {
            InputStream input = Server.class.getResourceAsStream(JWT_SALT_PATH);
            byte[] salt = new byte[32];
            input.read(salt, 0, 32);
            JWT_SALT = new String(salt);
            input.close();

            input = Server.class.getResourceAsStream(G2_AUTH_PATH);
            Scanner rdr = new Scanner(input);
            Google2Key = rdr.nextLine();
            Google2Secret = rdr.nextLine();

        }
        catch(FileNotFoundException fnfe)
        {
            System.err.println("JWT Salt file could not be found.");
            return;
        }

        final Config config = new DDGConfigFactory(JWT_SALT, Google2Key ,Google2Secret).build();

        port(2538);

        // This users looks in the folder `public` for the static web artifacts,
        // which includes all the HTML, CSS, and JS files generated by the Angular
        // build. This `public` directory _must_ be somewhere in the classpath;
        // a problem which is resolved in `server/build.gradle`.
        staticFiles.location("/public");

        PlantController plantController = new PlantController(databaseName);
        GardenCharts chartMaker = new GardenCharts(databaseName);
        BedController bedController = new BedController(databaseName);

        options("/*", (request, response) -> {

            String accessControlRequestHeaders = request.headers("Access-Control-Request-Headers");
            if (accessControlRequestHeaders != null) {
                response.header("Access-Control-Allow-Headers", accessControlRequestHeaders);
            }

            String accessControlRequestMethod = request.headers("Access-Control-Request-Method");
            if (accessControlRequestMethod != null) {
                response.header("Access-Control-Allow-Methods", accessControlRequestMethod);
            }
 
            return "OK";
        });

        before((request, response) -> response.header("Access-Control-Allow-Origin", JS_ORIGIN_URL));

        // Redirects for the "home" page
        redirect.get("", "/");

        Route clientRoute = (req, res) -> {
            InputStream stream = plantController.getClass().getResourceAsStream("/public/index.html");
            return IOUtils.toString(stream);
        };

        get("/", clientRoute);


        final CallbackRoute callback = new CallbackRoute(config, null, true);
        callback.setRenewSession(false);
        get("/callback", callback);
        post("/callback", callback);

        /*
            Require Authentication before reaching any of the admin pages
         */
//        before("api/admin", new SecurityFilter(config, "Google2Client"));
//        before("api/admin", (request, response) -> {
//            String token = generateJWTToken(request, response);
//            if(!token.isEmpty()) {
//                response.cookie("token", token);
//            }
//            boolean authenticated = isAuthorized(token);
//            if(!authenticated)
//                halt(401, "Please log in with a valid Administrator Google email.");
//        });
//        before("api/admin/*", new SecurityFilter(config, "Google2Client"));
//        before("api/admin/*", (request, response) -> {
//            String token = generateJWTToken(request, response);
//            response.cookie("token", token);
//            boolean authenticated = isAuthorized(token);
//            if(!authenticated)
//                halt(401, "Please log in with a valid Administrator Google email.");
//        });


        get("foo", (request, response) -> {
            final SparkWebContext context = new SparkWebContext(request, response);

            SecurityFilter halp = new SecurityFilter(config, "Google2Client");
            config.getClients().getDefaultClient().redirect(context);
            halp.handle(request,response);
            return true;
        });

        /*///////////////////////////////////////////////////////////////////
         * BEGIN VISITOR ENDPOINTS
         *////////////////////////////////////////////////////////////////////

        // Return all plants
        get("api/plants", (req, res) -> {
            res.type("application/json");
            return plantController.listPlants(req.queryMap().toMap(), getLiveUploadId());
        });

        //Get a plant by plantId
        get("api/plant/:plantID", (req, res) -> {
            res.type("application/json");
            String id = req.params("plantID");
            return plantController.getPlantByPlantID(id, getLiveUploadId());
        });

        //Get feedback counts for a plant
        get("api/plant/:plantID/counts", (req, res) -> {
            res.type("application/json");
            String id = req.params("plantID");
            return plantController.getPlantFeedbackByPlantIdJSON(id,getLiveUploadId());
        });

        //List all Beds
        get("api/gardenLocations", (req, res) -> {
            res.type("application/json");
            return plantController.getGardenLocationsJSON(getLiveUploadId());
        });

        //List all Common Names
        get("api/commonNames", (req, res) -> {
            res.type("application/json");
            return plantController.getCommonNamesJSON(getLiveUploadId());
        });

        post("api/plant/rate", (req, res) -> {
            System.out.println("api/plant/rate " + req.body());
            res.type("application/json");
            return plantController.addFlowerRating(req.body(),getLiveUploadId());
        });



        post("api/bedVisit", (req, res) -> {
            res.type("application/json");
            String body = req.body();
            //Increment bedCount
            bedController.addBedVisit(body, getLiveUploadId());
            return true;
        });

        post("api/qrVisit", (req, res) -> {
            res.type("application/json");
            String body = req.body();

            //Increment bedCount
            //Increment qrForBedCount
            bedController.addBedQRVisit(body, getLiveUploadId());
            return true;
        });

        // Posting a comment
        post("api/plant/leaveComment", (req, res) -> {
            res.type("application/json");
            return plantController.storePlantComment(req.body(), getLiveUploadId());
        });

        /*///////////////////////////////////////////////////////////////////
         * END VISITOR ENDPOINTS
         *////////////////////////////////////////////////////////////////////
        /*///////////////////////////////////////////////////////////////////
         * ADMIN ENDPOINTS
         *////////////////////////////////////////////////////////////////////

        //Authorization request to view admin page
        get("api/admin", (req, res) -> {

            res.type("application/json");
            return true;
        });

        // Accept an xls file
        post("api/admin/import", (req, res) -> {
            if(!isAuthorized(req.cookie("token"))) {
                //Not Authorized
                halt(403);
                return null;
            }

            res.type("application/json");
            try {

                MultipartConfigElement multipartConfigElement = new MultipartConfigElement(excelTempDir);
                req.raw().setAttribute("org.eclipse.jetty.multipartConfig", multipartConfigElement);
                Part part = req.raw().getPart("file[]");

                ExcelParser parser = new ExcelParser(part.getInputStream(), databaseName);

                String id = ExcelParser.generateNewUploadId();
                String[][] excelFile = parser.parseExcel();
                parser.populateDatabase(excelFile, id);

                return JSON.serialize(id);

            } catch (Exception e) {
                e.printStackTrace();
                throw e;
            }

        });


        //Patch from spreadsheet
        post("api/admin/patch", (req, res) -> {
            if(!isAuthorized(req.cookie("token"))) {
                //Not Authorized
                halt(403);
                return null;
            }

            res.type("application/json");
            try {

                MultipartConfigElement multipartConfigElement = new MultipartConfigElement(excelTempDir);
                req.raw().setAttribute("org.eclipse.jetty.multipartConfig", multipartConfigElement);
                Part part = req.raw().getPart("file[]");

                ExcelParser parser = new ExcelParser(part.getInputStream(), databaseName);

                String oldUploadId = getLiveUploadId();
                String newUploadId = ExcelParser.generateNewUploadId();
                String[][] excelFile = parser.parseExcel();
                parser.patchDatabase(excelFile, oldUploadId, newUploadId);

                return JSON.serialize(newUploadId);

            } catch (Exception e) {
                e.printStackTrace();
                throw e;
            }

        });

        get("api/admin/export", (req, res) -> {


            if(!isAuthorized(req.cookie("token"))) {
                //Not Authorized
                SecurityFilter securityFilter = new SecurityFilter(config, "Google2Client");
                Google2Client client = new Google2Client();

                securityFilter.handle(req, res);
//                res.redirect(auth.getAuthURL(publicURL + "/admin/exportData"));
                return res; // not reached
            }


            res.type("application/vnd.ms-excel");
            res.header("Content-Disposition", "attachment; filename=\"Garden-Visitor data.xlsx\"");

            // Note that after flush() or close() is called on
            // res.raw().getOutputStream(), the response can no longer be
            // modified. Since writeComment(..) closes the OutputStream
            // when it is done, it needs to be the last line of this function.
            //REVISED to attempt to fix bug where first write always breaks.
            // If an exception is thrown (specifically within workbook.write() within complete() in FeedbackWriter
            // This loop will attempt to write feedback twice, writing to an intermediate buffer.
            // If the write succeeds, then write it to the response output stream
            int error = 6;
            while(error > 0) {
                try {
                    ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                    plantController.writeFeedback(buffer, req.queryMap().toMap().get("uploadId")[0]);


                    OutputStream out = res.raw().getOutputStream();
                    out.write(buffer.toByteArray());
                    out.flush();
                    out.close();
                    error = 0;
                } catch (Exception e) {
                    e.printStackTrace();
                    error--;
                    if(error == 0)
                    {
                        //If all attempts fail, produce an Internal Server Error 500
                        throw e;
                    }
                }
            }


            return res;
        });

        // List all uploadIds
        get("api/admin/uploadIds", (req, res) -> {
            res.type("application/json");
            return ExcelParser.listUploadIds(databaseName);
        });

        get("api/admin/qrcodes", (req, res) -> {
            res.type("application/zip");

            //Creates a Zip file, found at zipPath
            String liveUploadID = getLiveUploadId();
            String zipPath = QRCodes.CreateQRCodesFromAllBeds(
                    liveUploadID,
                    plantController.getGardenLocations(liveUploadID),
                    API_URL + "/bed/");

            if(zipPath == null)
                return null;

            res.header("Content-Disposition","attachment; filename=\"" + zipPath + "\"");

            //Get bytes from the file
            File zipFile = new File(zipPath);
            byte[] bytes = spark.utils.IOUtils.toByteArray(new FileInputStream(zipFile));

            //Delete local .zip file
            Files.delete(Paths.get(zipPath));

            return bytes;
        });

        get("api/admin/liveUploadId", (req, res) -> {
            res.type("application/json");
            return JSON.serialize(getLiveUploadId());
        });


        /*///////////////////////////////////////////////////////////////////
            BEGIN CHARTS
        *////////////////////////////////////////////////////////////////////




        // Views per Hour
        get("api/admin/charts/viewsPerHour", (req, res) -> {
            res.type("application/json");
            return chartMaker.getPlantViewsPerHour(getLiveUploadId());
        });

        get("api/admin/charts/plantMetadataMap", (req, res) -> {
            res.type("application/json");
            return chartMaker.getBedMetadataForMap(plantController, getLiveUploadId());
        });

        get("api/admin/charts/plantMetadataBubbleMap", (req, res) -> {
            res.type("application/json");

            return chartMaker.getBedMetadataForBubbleMap(plantController, bedController, getLiveUploadId());
        });

        //Host the aerial image of the Garden
        get("api/admin/gardenPicture", (req, res) -> {
            res.type("application/png");
            String gardenPath = "/Garden.png";

            return plantController.getClass().getResourceAsStream(gardenPath);
        });

        /*///////////////////////////////////////////////////////////////////
            END CHARTS
        *////////////////////////////////////////////////////////////////////
        /*///////////////////////////////////////////////////////////////////
         * END ADMIN ENDPOINTS
         */ ///////////////////////////////////////////////////////////////////


        get("/*", clientRoute);

        // Handle "404" file not found requests:
        notFound((req, res) -> {
            res.type("text");
            res.status(404);
            return "Sorry, we couldn't find that!";
        });
    }

    private static boolean isAuthorized(String jwtToken)
    {
        if(jwtToken == null || jwtToken.isEmpty())
            return false;

        JwtAuthenticator authenticator = new JwtAuthenticator(new SecretSignatureConfiguration(JWT_SALT));
        Google2Profile prof = (Google2Profile) authenticator.validateToken(jwtToken);

        if(prof == null)
        {
            System.err.println("Google2Profile was null");
            return false;
        }

        List<JSONObject> emails = (List<JSONObject>)(Object)prof.getEmails();
        Set<String> authorizedEmails = new TreeSet<String>();
        authorizedEmails.add("frazi177@morris.umn.edu");
//		authorizedEmails.add("carav008@morris.umn.edu");
        for(JSONObject e : emails)
        {
            System.err.println("Found email:" + e.get("email"));
            if(authorizedEmails.contains(e.get("email")))
                return true;
        }
        return false;
    }

    private static String generateJWTToken(final Request request, final Response response) {
        final SparkWebContext context = new SparkWebContext(request, response);
        final ProfileManager manager = new ProfileManager(context);
        final Optional<CommonProfile> profile = manager.get(true);
        String token = "";
        if (profile.isPresent()) {
            JwtGenerator generator = new JwtGenerator(new SecretSignatureConfiguration(JWT_SALT));
            token = generator.generate(profile.get());
        }
        return token;
    }

    public static String getLiveUploadId()
    {
        return ExcelParser.getLiveUploadId(databaseName);
    }
}
